from ui_qtmaterial import Ui_MainWindow
import sys
from PySide6.QtWidgets import QApplication,QMainWindow,QLabel,QFrame,QPushButton,QMessageBox,QTableWidget,QTableWidgetItem
from qt_material import *
from database import DataBase
import re

class MainWindows(QMainWindow,Ui_MainWindow):
    def __init__(self):
        super(MainWindows, self).__init__()
        self.setupUi(self)
        self.setWindowTitle("SysDark")

        #### Instanciar Banco
        self.bd = DataBase()
        self.consultar_dados()

        self.btn_cadastrar.clicked.connect(self.cadastrar)
        #self.stackedWidget -> para mudar de tela....
        self.btn_relatorio.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_relatorio))
        self.btn_home.clicked.connect(lambda: self.stackedWidget.setCurrentWidget(self.page_cad))
        self.btn_sair.clicked.connect(self.consultar_dados)
        self.btn_editar.clicked.connect(self.editar_dados)
        self.input_filtrar.textChanged.connect(self.filtrar_dados)
        self.btn_excluir.clicked.connect(self.deletar_cadastro)

    def deletar_cadastro(self):
        msg = QMessageBox()
        msg.setWindowTitle("Excluir cadastro")
        msg.setText("Este registro será excluído!")
        msg.setInformativeText("Você tem certeza que deseja continuar?")
        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        resp = msg.exec()

        if resp == QMessageBox.Yes:
            #print("OKKK")
            id = self.table_relatorio.selectionModel().currentIndex().siblingAtColumn(0).data()
            res = self.bd.delete(id)
            
            #print(res)
            self.msg(res[0],res[1])
            self.consultar_dados()

    def editar_dados(self):
        #lista temporaria para pegar as linhas
        data = []
        update_data = []

        for row in range(self.table_relatorio.rowCount()):
            for column in range(self.table_relatorio.columnCount()):
                data.append(self.table_relatorio.item(row,column).text())
            
            update_data.append(data)
            data = []
        
        for linha in update_data:
            res = self.bd.update(linha)

        self.msg(res[0],res[1])

    def consultar_dados(self):
        result = self.bd.select()

        #print(result)
        self.table_relatorio.clearContents()
        self.table_relatorio.setRowCount(len(result))

        for row, text in enumerate(result):
            for column, data in enumerate(text):
                self.table_relatorio.setItem(row, column, QTableWidgetItem(str(data)))

    def filtrar_dados(self):
        txt = re.sub('[\W_]+','',self.input_filtrar.text())
        res = self.bd.filter(txt)
        #print(res)

        self.table_relatorio.setRowCount(len(res))

        for row, text in enumerate(res):
            for column, data in enumerate(text):
                self.table_relatorio.setItem(row, column, QTableWidgetItem(str(data)))

    def cadastrar(self):
        cnpj = self.input_cnpj.text()
        nome = self.input_nome.text()
        fone = self.input_fone.text()
        email = self.input_email.text()
        endereco = self.input_endereco.text()
        cidade = self.input_cidade.text()
        estado = self.combo_estado.currentText()

        result = []
        if len(cnpj) < 9 and len(nome) < 3 and len(fone) < 10:
            result = 'erro','CNPJ,NOME,FONE'
            self.msg(result[0],result[1])
        elif len(email) < 5 and len(endereco) < 5 and len(cidade) < 3:
            result = 'erro','EMAIL, ENDERECO,CIDADE'
            self.msg(result[0],result[1])
        else:
            #ARMAZENA O RETORNO DA FUNCAO DE INSERT
            result = self.bd.insert(cnpj,nome,fone,email,endereco,cidade,estado)
            #print(type(result)
            self.msg(result[0],result[1])

        #Após terminar a função de consulta 
        self.consultar_dados()
        
    def msg(self,tipo,mensagem):
        msg = QMessageBox()
        if tipo.lower() == 'ok':
            msg.setIcon(QMessageBox.Information)
        elif tipo.lower() == 'erro':
            msg.setIcon(QMessageBox.Critical)
        elif tipo.lower() == 'aviso':
            msg.setIcon(QMessageBox.Warning)
        
        msg.setText(mensagem)
        msg.exec()
        self.clean()

    def clean(self):
        self.input_cnpj.setText("")
        self.input_nome.setText("")
        self.input_fone.setText("")
        self.input_email.setText("")
        self.input_endereco.setText("")
        self.input_cidade.setText("")
        self.combo_estado.setCurrentText("")
        

if __name__ == '__main__':
    app = QApplication(sys.argv)
    apply_stylesheet(app, theme='dark_cyan.xml')
    win = MainWindows()
    win.show()
    app.exec()